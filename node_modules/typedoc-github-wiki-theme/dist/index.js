"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatContents = exports.load = void 0;
const fs = __importStar(require("fs"));
const typedoc_plugin_markdown_1 = require("typedoc-plugin-markdown");
const options_1 = require("./options");
const options = __importStar(require("./options/declarations"));
const presets_1 = __importDefault(require("./options/presets"));
const sidebar_1 = require("./sidebar");
function load(app) {
    Object.entries(options).forEach(([name, option]) => {
        app.options.addDeclaration({
            name,
            ...option,
        });
    });
    app.options.addReader(new (class {
        constructor() {
            this.name = 'github-wiki-options';
            this.order = 0;
            this.supportsPackages = false;
        }
        read(container) {
            Object.entries(presets_1.default).forEach(([key, value]) => {
                container.setValue(key, value);
            });
        }
    })());
    app.renderer.on(typedoc_plugin_markdown_1.MarkdownPageEvent.END, (page) => {
        page.contents = page.contents?.replace(/\[([^\]]+)\]\((?!https?:|\/|\.)([^)]+)\)/g, (match, text, url) => {
            return `[${text}](${encodeURI('../wiki/' + url.replace('.md', ''))})`;
        });
    });
    app.renderer.postRenderAsyncJobs.push(async (output) => {
        const sidebarOptions = {
            ...options_1.DEFAULT_SIDEBAR_OPTIONS,
            ...app.options.getValue('sidebar'),
        };
        if (sidebarOptions.autoConfiguration && output.navigation) {
            const sidebarHeading = sidebarOptions.heading;
            const sidebarContent = (0, sidebar_1.getSidebar)(output.navigation);
            if (sidebarContent.length) {
                fs.writeFileSync(`${output.outputDirectory}/_Sidebar.md`, `## ${sidebarHeading}\n\n${formatContents((0, sidebar_1.getSidebar)(output.navigation))}`);
            }
        }
    });
}
exports.load = load;
function formatContents(contents) {
    return (contents.replace(/[\r\n]{2,}/g, '\n\n').replace(/^\s+|\s+$/g, '') + '\n');
}
exports.formatContents = formatContents;
